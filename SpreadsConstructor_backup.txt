#include <iostream>
#include <fstream>
#include <string>
#include <cstdlib>
#include <vector>
#include <experimental/filesystem>
#include "Modules.h"
#include <stdlib.h>
#include <algorithm>
#include <iomanip>
#include "Functions.h"
#include <sys/stat.h>
#include <sys/types.h>
using namespace std;
namespace fs = std::experimental::filesystem;

struct colon_is_space : std::ctype<char>
{
	colon_is_space() : std::ctype<char>(get_table()) {}
	static mask const* get_table()
	{
		static mask rc[table_size];
		rc[';'] = std::ctype_base::space;
		rc['\n'] = std::ctype_base::space;
		return &rc[0];
	}
};


void Modules::SubroutineSpreadsConstructor()
{
	std::cout << "**********SPREADCONSTRUCTOR********"<< endl;
	std::cout << "Please select type in Folder Destination of Futures contracts or return to main Menu with 3 \n \
			Sample: F:/Users/usr/Desktop/The_Domain/Library/PremiumData/CONTRACTS/ \n \
			Target folder should only consist of one future" << endl;

	string Path = "/media/Dave/Volume/Futures2020/ASCII/";
	
	
	if (Path != "0")
	{
		std::cout<<"Construction starts"<< endl;
		
		string date; 
		string Open;
		string High;
		string Low;
		string close;
		string volume;
		string OI;
		string symbol;
		long counter = 0;
		ifstream theFile;
		
		for(const auto& entry : fs::directory_iterator(Path))
		{
			string Path2 = entry.path().string();
			cout << Path2 << endl;

			
			for (const auto& entry : fs::directory_iterator(Path2))
			{
				string filelocation = entry.path().string();
				theFile.open(filelocation);


				if (theFile.is_open())
				{
					while (theFile >> symbol >> date >> Open >> High >> Low >> close >> volume >> OI)
					{
						//counting each action of each line in Folder
						counter++;

						///std::cout << counter << endl;
					}

					theFile.close();
				}
			}

			
			counter = counter * 9;
			
			//Now we create the vector 
			vector<vector<double>> Arr(counter);
			
			int size = (int)Arr.size() +1;
			
			for(int i = 0; i < counter; i++)
			{
				Arr[i] = vector<double>(8);
				
				for(int j = 0; j < 8; j++)
				{
					Arr[i][j] = 0;
				}
			}
			
			long Nelements = (long)counter * 9;
			
			counter = 0;
			string test;
			
			theFile.imbue(locale(theFile.getloc(), new colon_is_space));
			
			for(const auto& entry : fs::directory_iterator(Path2))
			{
				string filelocation = entry.path().string();
				theFile.open(filelocation);
				
				if(theFile.is_open())
				{
					while(theFile >> symbol >> date >> Open >> High >> Low >> close >> volume >> OI)
					{
						Arr[counter][0] = Functions::DateFormatter(date);
						Arr[counter][1] = Functions::SymbolFormatter(symbol);
						Arr[counter][2] = atof(Open.c_str());
						Arr[counter][3] = atof(High.c_str());
						Arr[counter][4] = atof(Low.c_str());
						Arr[counter][5] = atof(close.c_str());
						Arr[counter][6] = atof(volume.c_str());
						Arr[counter][7] = atof(OI.c_str());
						
						counter++;
						
					}
					
					theFile.close();
					
				}
				
			}
			
			std::cout << "storage successful" << endl;
			
			//Sorting Array first by date and then by contracts, thus creating forward curve
			std::sort(Arr.rbegin(),Arr.rend());
			std::sort(Arr[1].rbegin(),Arr[1].rend());
			
			
			/*///testcode
			for (int i = 0; i < counter; i++)
			{
				int date = (double)Arr[i][0];
				cout /*<<std::fixed<< Arr[i][0] << ";		" << Arr[i][1] << ";		" << Arr[i][2] << ";		" << Arr[i][3] << ";		" << Arr[i][4] << ";		" << Arr[i][5] << ";		"
					<< Arr[i][6] << ";		" << Arr[i][7] << ";		" << date << endl;
			}
			*/
			
			Path2.erase(Path2.begin(), Path2.begin()+Path.length());
			
			for (int i = 0; i < (int)Path2.length() ; i++)
			{
				if(Path2[i] == ' ')
				{
					Path2[i] = '_';
				}
			}
			
			
			string Dir = "/media/Dave/Volume/Futures2020/ASCII_SPREADS/"+Path2;
			
			mkdir(Dir.c_str(), S_IRWXU | S_IRWXG | S_IROTH | S_IXOTH);
			
			int k=0;
			//Other way aroung because of sorting order
			for(int i = counter; i>1; i--)
			{
				//When a new Day starts, analyze the forward curve
				if(Arr[i][0] > Arr[i+1][0])
				{
					k= 0;
					//subtracting n+1 from current contract and creating corresponding ASCII-file
					while (Arr[i-k][0]==Arr[i-k-1][0])
					{
						string ASCII_name = Dir+'/'+Path2+to_string((int)Arr[i-k][1])+"-"+to_string((int)Arr[i-k-1][1])+".txt";
						ofstream Output;
						Output.open(ASCII_name,ios::app);
						
						if(Output.is_open())
						{							
							string date = to_string(Arr[i-k][0]);
							date = string() + date[6] + date[7] + date[4] + date[5] + date[0]+ date[1] + date[2] + date[3];
							date.insert(date.begin() + 2, '.');
							date.insert(date.begin() + 5, '.');
							
							Output << Path2+"_"+to_string((int)Arr[i-k][1])+"_"+to_string((int)Arr[i-k-1][1])<< ";"<<date <<";"<<Arr[i-k-1][2] - Arr[i-k][2]<<";"<<Arr[i-k-1][3] - Arr[i-k][3]<<";"<<
							Arr[i-k-1][4]-Arr[i-k-1][4]<<";"<<Arr[i-k-1][5]-Arr[i-k][5]<<";"<<Arr[i-k-1][6]+Arr[i-k][6]<<";"<<Arr[i-k-1][7]+Arr[i-k][7]<< endl;
						}
						
						Output.close();
						k++;
					}	
					
				}
			}
			
			/*//Artificial Breakpoint
		
			cout << "Breakpoint hit!, enter 1 to continue, 0 to return to main menu" << endl;
			int A;
			
			cin >> A;
			
			if( A == 0)
			{
				Modules::SubroutineMainMenu();
				break;
			}
			*/
		}
		
		
		
		
	}
	
	else 
	{
		Modules::SubroutineMainMenu();
	}
}
